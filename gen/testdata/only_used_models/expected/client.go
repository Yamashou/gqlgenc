// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/Yamashou/gqlgenc/v3/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli client.HttpClient, baseURL string, options *client.Options, interceptors ...client.RequestInterceptor) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options, interceptors...)}
}

type CreateMany_CreateTodos_Todos struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateMany_CreateTodos_Todos) GetID() string {
	if t == nil {
		t = &CreateMany_CreateTodos_Todos{}
	}
	return t.ID
}

type CreateMany_CreateTodos struct {
	Todos []*CreateMany_CreateTodos_Todos "json:\"todos\" graphql:\"todos\""
}

func (t *CreateMany_CreateTodos) GetTodos() []*CreateMany_CreateTodos_Todos {
	if t == nil {
		t = &CreateMany_CreateTodos{}
	}
	return t.Todos
}

type CreateMany struct {
	CreateTodos *CreateMany_CreateTodos "json:\"createTodos,omitempty\" graphql:\"createTodos\""
}

func (t *CreateMany) GetCreateTodos() *CreateMany_CreateTodos {
	if t == nil {
		t = &CreateMany{}
	}
	return t.CreateTodos
}

const CreateManyDocument = `mutation CreateMany ($todos: NewTodos!) {
	createTodos(input: $todos) {
		todos {
			id
		}
	}
}
`

func (c *Client) CreateMany(ctx context.Context, todos NewTodos, interceptors ...client.RequestInterceptor) (*CreateMany, error) {
	vars := map[string]any{
		"todos": todos,
	}

	var res CreateMany
	if err := c.Client.Post(ctx, "CreateMany", CreateManyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CreateManyDocument: "CreateMany",
}
