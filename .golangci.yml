version: "2"
run:
  go: "1.24"
linters:
  default: all
  disable:
    - cyclop # Cyclomatic complexity becomes very high when called from code generated by gqlgen, and it's difficult to resolve, so ignoring for now
    - dupl
    - dupword # Lint to detect redundant words, disabled as unnecessary
    - errname # No need to restrict error variable names, so ignoring
    - funlen
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - gocyclo
    - godot
    - godox
    - interfacebloat # Lint to specify the upper limit of interface, disabled as unnecessary
    - ireturn # Returning interfaces results in errors, but it's not a problem, so ignoring
    - lll
    - maintidx # Disabled as cyclomatic etc. are unnecessary
    - musttag # Lint to require json tags, disabled as unnecessary
    - nestif
    - nlreturn
    - paralleltest
    - protogetter # Disabled because we don't use proto
    - tagliatelle # JSON tag format is not unified across external APIs and gen files, so all would need to be excluded. Too many files to exclude, so ignoring for now
    - testpackage
    - varnamelen # No need to restrict variable name length, so disabled
    - wsl
  settings:
    depguard: # The file judgment is made against the absolute path, so you always need to put ** at the beginning.
      rules:
        gqlparserv1:
          deny:
            - pkg: ^github.com/vektah/gqlparser$
              desc: use github.com/vektah/gqlparser/v2
        gqlgencv1:
          deny:
            - pkg: github.com/builtbystack/erp/server/src/lib/ctxvalue
              desc: Use of ctxvalue package is prohibited in usecase package
    errcheck:
      exclude-functions:
        - Write
        - Copy
        - WriteString
        - Render
    forbidigo: # Identifier that matches forbid will result in error
      forbid:
        - pattern: ^print.*$
        - pattern: ^sort\..*$ # Use slices package
      analyze-types: true
    gomoddirectives:
      replace-local: true
    gosec:
      excludes:
        - G101 # G101: Ignoring "Potential hardcoded credentials" as there are many false positives
    govet:
      disable:
        - shadow
        - fieldalignment
      enable-all: true
    misspell: # Check for spelling mistakes in comments and text
    nakedret:
      max-func-lines: 1
    nolintlint:
      require-explanation: true
      require-specific: true
      allow-unused: false
    perfsprint:
      strconcat: false # Ignoring advice to change fmt.Sprintf("%s a", text) to text + "a" for now
    staticcheck:
      checks:
        - all
        - -SA1019
    unparam:
      check-exported: true
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    paths:
      - .*_gen\.go$
      - third_party$
      - builtin$
      - examples$
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
formatters:
  enable:
    - gci
    - gofmt
    - goimports
  settings:
    gofmt:
      rewrite-rules:
        - pattern: 'interface{}'
          replacement: 'any'
        - pattern: 'a[b:len(a)]'
          replacement: 'a[b:]'
    gci:
      sections:
        - standard
        - default
        - prefix(github.com/vektah/gqlparser)
        - prefix(github.com/99designs/gqlgen)
        - prefix(github.com/Yamashou/gqlgenc)
  exclusions:
    generated: lax
    paths:
      - .*_gen\.go$
      - third_party$
      - builtin$
      - examples$
