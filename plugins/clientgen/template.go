package clientgen

import (
	_ "embed" // used to load template file
	"fmt"

	"github.com/99designs/gqlgen/codegen/templates"
	"github.com/Yamashou/gqlgenc/v3/config"
	"github.com/Yamashou/gqlgenc/v3/generator"
)

//go:embed template.gotpl
var template string

func RenderTemplate(cfg *config.Config, operations []*generator.Operation) error {
	if err := templates.Render(templates.Options{
		PackageName: cfg.GQLGencConfig.ClientGen.Package,
		Filename:    cfg.GQLGencConfig.ClientGen.Filename,
		Template:    template,
		Data: map[string]any{
			"QueryPackage": cfg.GQLGencConfig.QueryGen.Pkg().Name(),
			"Operation":    operations,
		},
		Packages:   cfg.GQLGenConfig.Packages,
		PackageDoc: "// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.\n",
	}); err != nil {
		return fmt.Errorf("%s generating failed: %w", cfg.GQLGencConfig.ClientGen.Filename, err)
	}

	return nil
}
