package querygen

import (
	"bytes"
	_ "embed" // used to load template file
	"fmt"
	"go/types"

	"github.com/99designs/gqlgen/codegen/templates"

	"github.com/Yamashou/gqlgenc/v3/codegen"
	"github.com/Yamashou/gqlgenc/v3/config"
)

//go:embed template.tmpl
var template string

func RenderTemplate(cfg *config.Config, operations []*codegen.Operation, goTypes []types.Type) error {
	if err := templates.Render(templates.Options{
		PackageName:     cfg.GQLGencConfig.QueryGen.Package,
		Template:        template,
		TemplateFS:      nil,
		Filename:        cfg.GQLGencConfig.QueryGen.Filename,
		RegionTags:      false,
		GeneratedHeader: false,
		PackageDoc:      "// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.\n",
		FileNotice:      "",
		Data: map[string]any{
			"GoTypes":    goTypes,
			"Operations": operations,
		},
		Funcs: map[string]any{
			"genCode": genCode,
		},
		Packages: cfg.GQLGenConfig.Packages,
	}); err != nil {
		return fmt.Errorf("%s generating failed: %w", cfg.GQLGencConfig.QueryGen.Filename, err)
	}

	return nil
}

func genCode(t types.Type) string {
	pointerType, ok := t.(*types.Pointer)
	if ok {
		t = pointerType.Elem()
	}
	namedType := t.(*types.Named)                        //nolint:forcetypeassert // if not *types.Named, then panic
	structType := namedType.Underlying().(*types.Struct) //nolint:forcetypeassert // if not *types.Struct, then panic
	typeName := toString(namedType)

	var buf bytes.Buffer
	fmt.Fprintf(&buf, "type %s %s\n", typeName, toString(structType))
	if nonnull := pointerType == nil; nonnull {
		return buf.String()
	}

	for i := range structType.NumFields() {
		field := structType.Field(i)
		fieldName := field.Name()
		fieldTypeName := toString(field.Type())

		fmt.Fprintf(&buf, `func (t *%s) Get%s() %s {
	if t == nil {
		t = &%s{}
	}
	return t.%s
}
`, typeName, fieldName, fieldTypeName, typeName, fieldName)
	}

	return buf.String()
}

func toString(p types.Type) string {
	return templates.CurrentImports.LookupType(p)
}
