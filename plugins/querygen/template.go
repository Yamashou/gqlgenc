package querygen

import (
	_ "embed" // used to load template file
	"fmt"
	"github.com/Yamashou/gqlgenc/v3/clientgenv2"
	"go/types"

	"github.com/99designs/gqlgen/codegen/templates"
	"github.com/Yamashou/gqlgenc/v3/config"
	"github.com/Yamashou/gqlgenc/v3/gotype"
)

//go:embed template.gotpl
var template string

func RenderTemplate(cfg *config.Config, operations []*clientgenv2.Operation, generatedTypes []types.Type) error {
	if err := templates.Render(templates.Options{
		PackageName: cfg.GQLGencConfig.QueryGen.Package,
		Filename:    cfg.GQLGencConfig.QueryGen.Filename,
		Template:    template,
		Data: map[string]any{
			"GeneratedTypes": generatedTypes,
			"Operations":     operations,
		},
		Packages:   cfg.GQLGenConfig.Packages,
		PackageDoc: "// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.\n",
		Funcs: map[string]any{
			"getterFunc": gotype.GetterFunc(),
		},
	}); err != nil {
		return fmt.Errorf("%s generating failed: %w", cfg.GQLGencConfig.QueryGen.Filename, err)
	}

	return nil
}
