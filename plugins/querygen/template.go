package querygen

import (
	"bytes"
	_ "embed" // used to load template file
	"fmt"
	"github.com/99designs/gqlgen/codegen/templates"
	"github.com/Yamashou/gqlgenc/v3/config"
	"github.com/Yamashou/gqlgenc/v3/source"
	"go/types"
)

//go:embed template.tmpl
var template string

func RenderTemplate(cfg *config.Config, operations []*source.Operation, goTypes []types.Type) error {
	if err := templates.Render(templates.Options{
		PackageName: cfg.GQLGencConfig.QueryGen.Package,
		Filename:    cfg.GQLGencConfig.QueryGen.Filename,
		Template:    template,
		Data: map[string]any{
			"GoTypes":    goTypes,
			"Operations": operations,
		},
		Packages:   cfg.GQLGenConfig.Packages,
		PackageDoc: "// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.\n",
		Funcs: map[string]any{
			"genCode": genCode,
		},
	}); err != nil {
		return fmt.Errorf("%s generating failed: %w", cfg.GQLGencConfig.QueryGen.Filename, err)
	}

	return nil
}

func genCode(t types.Type) string {
	pointerType, ok := t.(*types.Pointer)
	if ok {
		t = pointerType.Elem()
	}

	namedType := t.(*types.Named)
	structType := namedType.Underlying().(*types.Struct)
	typeName := toString(namedType)

	var buf bytes.Buffer
	fmt.Fprintf(&buf, "type %s %s\n", typeName, toString(structType))
	for i := range structType.NumFields() {
		field := structType.Field(i)
		fieldName := field.Name()
		if embedded := fieldName == ""; embedded {
			continue
		}

		if nonnull := pointerType == nil; nonnull {
			continue
		}

		fieldTypeName := toString(field.Type())
		fmt.Fprintf(&buf, "func (t *%s) Get%s() %s {\n", typeName, fieldName, fieldTypeName)

		fmt.Fprintf(&buf, "\tif t == nil {\n\t\tt = &%s{}\n\t}\n", typeName)

		fmt.Fprintf(&buf, "\treturn t.%s\n}\n", fieldName)
	}

	return buf.String()
}

func toString(p types.Type) string {
	return templates.CurrentImports.LookupType(p)
}
