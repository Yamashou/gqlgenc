// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gen

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type ItemFragment struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ItemFragment) GetID() string {
	if t == nil {
		t = &ItemFragment{}
	}
	return t.ID
}
func (t *ItemFragment) GetName() string {
	if t == nil {
		t = &ItemFragment{}
	}
	return t.Name
}

type ItemNotFoundFragment struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ItemNotFoundFragment) GetID() string {
	if t == nil {
		t = &ItemNotFoundFragment{}
	}
	return t.ID
}

type GetItem_Item struct {
	Item         ItemFragment         "graphql:\"... on Item\""
	ItemNotFound ItemNotFoundFragment "graphql:\"... on ItemNotFound\""
	Typename     *string              "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *GetItem_Item) GetItem() *ItemFragment {
	if t == nil {
		t = &GetItem_Item{}
	}
	return &t.Item
}
func (t *GetItem_Item) GetItemNotFound() *ItemNotFoundFragment {
	if t == nil {
		t = &GetItem_Item{}
	}
	return &t.ItemNotFound
}
func (t *GetItem_Item) GetTypename() *string {
	if t == nil {
		t = &GetItem_Item{}
	}
	return t.Typename
}

type GetItem struct {
	Item GetItem_Item "json:\"item\" graphql:\"item\""
}

func (t *GetItem) GetItem() *GetItem_Item {
	if t == nil {
		t = &GetItem{}
	}
	return &t.Item
}

const GetItemDocument = `query GetItem ($itemId: ID!) {
	item(itemId: $itemId) {
		__typename
		... on Item {
			... ItemFragment
		}
		... on ItemNotFound {
			... ItemNotFoundFragment
		}
	}
}
fragment ItemFragment on Item {
	id
	name
}
fragment ItemNotFoundFragment on ItemNotFound {
	id
}
`

func (c *Client) GetItem(ctx context.Context, itemID string, interceptors ...clientv2.RequestInterceptor) (*GetItem, error) {
	vars := map[string]any{
		"itemId": itemID,
	}

	var res GetItem
	if err := c.Client.Post(ctx, "GetItem", GetItemDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetItemDocument: "GetItem",
}
