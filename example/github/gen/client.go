// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gen

import (
	"context"
	"time"

	"github.com/Yamashou/gqlgenc/v3/client"
	"github.com/Yamashou/gqlgenc/v3/example/github/model"
)

type GithubGraphQLClient interface {
	GetUser(ctx context.Context, repositoryFirst int, languageFirst int, interceptors ...client.RequestInterceptor) (*GetUser, error)
	GetNode(ctx context.Context, id string, interceptors ...client.RequestInterceptor) (*GetNode, error)
	AddStar(ctx context.Context, input model.AddStarInput, interceptors ...client.RequestInterceptor) (*AddStar, error)
	GetNode2(ctx context.Context, id string, interceptors ...client.RequestInterceptor) (*GetNode2, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli client.HttpClient, baseURL string, options *client.Options, interceptors ...client.RequestInterceptor) GithubGraphQLClient {
	return &Client{Client: client.NewClient(cli, baseURL, options, interceptors...)}
}

type LanguageFragment struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *LanguageFragment) GetID() string {
	if t == nil {
		t = &LanguageFragment{}
	}
	return t.ID
}
func (t *LanguageFragment) GetName() string {
	if t == nil {
		t = &LanguageFragment{}
	}
	return t.Name
}

type RepositoryFragment struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *RepositoryFragment) GetID() string {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.ID
}
func (t *RepositoryFragment) GetName() string {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.Name
}

type GetUser_Viewer_Repositories_Nodes_Languages struct {
	Nodes []*LanguageFragment "json:\"nodes,omitempty\" graphql:\"nodes\""
}

func (t *GetUser_Viewer_Repositories_Nodes_Languages) GetNodes() []*LanguageFragment {
	if t == nil {
		t = &GetUser_Viewer_Repositories_Nodes_Languages{}
	}
	return t.Nodes
}

type GetUser_Viewer_Repositories_Nodes struct {
	ID        string                                       "json:\"id\" graphql:\"id\""
	Languages *GetUser_Viewer_Repositories_Nodes_Languages "json:\"languages,omitempty\" graphql:\"languages\""
	Name      string                                       "json:\"name\" graphql:\"name\""
}

func (t *GetUser_Viewer_Repositories_Nodes) GetID() string {
	if t == nil {
		t = &GetUser_Viewer_Repositories_Nodes{}
	}
	return t.ID
}
func (t *GetUser_Viewer_Repositories_Nodes) GetLanguages() *GetUser_Viewer_Repositories_Nodes_Languages {
	if t == nil {
		t = &GetUser_Viewer_Repositories_Nodes{}
	}
	return t.Languages
}
func (t *GetUser_Viewer_Repositories_Nodes) GetName() string {
	if t == nil {
		t = &GetUser_Viewer_Repositories_Nodes{}
	}
	return t.Name
}

type GetUser_Viewer_Repositories struct {
	Nodes []*GetUser_Viewer_Repositories_Nodes "json:\"nodes,omitempty\" graphql:\"nodes\""
}

func (t *GetUser_Viewer_Repositories) GetNodes() []*GetUser_Viewer_Repositories_Nodes {
	if t == nil {
		t = &GetUser_Viewer_Repositories{}
	}
	return t.Nodes
}

type GetUser_Viewer struct {
	ID           string                      "json:\"id\" graphql:\"id\""
	Name         *string                     "json:\"name,omitempty\" graphql:\"name\""
	Repositories GetUser_Viewer_Repositories "json:\"repositories\" graphql:\"repositories\""
}

func (t *GetUser_Viewer) GetID() string {
	if t == nil {
		t = &GetUser_Viewer{}
	}
	return t.ID
}
func (t *GetUser_Viewer) GetName() *string {
	if t == nil {
		t = &GetUser_Viewer{}
	}
	return t.Name
}
func (t *GetUser_Viewer) GetRepositories() *GetUser_Viewer_Repositories {
	if t == nil {
		t = &GetUser_Viewer{}
	}
	return &t.Repositories
}

type GetNode_Node_Repository_Languages struct {
	Nodes []*LanguageFragment "json:\"nodes,omitempty\" graphql:\"nodes\""
}

func (t *GetNode_Node_Repository_Languages) GetNodes() []*LanguageFragment {
	if t == nil {
		t = &GetNode_Node_Repository_Languages{}
	}
	return t.Nodes
}

type GetNode_Node_Repository struct {
	Languages *GetNode_Node_Repository_Languages "json:\"languages,omitempty\" graphql:\"languages\""
	ID        string                             "json:\"id\" graphql:\"id\""
	Name      string                             "json:\"name\" graphql:\"name\""
}

func (t *GetNode_Node_Repository) GetLanguages() *GetNode_Node_Repository_Languages {
	if t == nil {
		t = &GetNode_Node_Repository{}
	}
	return t.Languages
}
func (t *GetNode_Node_Repository) GetID() string {
	if t == nil {
		t = &GetNode_Node_Repository{}
	}
	return t.ID
}
func (t *GetNode_Node_Repository) GetName() string {
	if t == nil {
		t = &GetNode_Node_Repository{}
	}
	return t.Name
}

type GetNode_Node_Reaction_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetNode_Node_Reaction_User) GetID() string {
	if t == nil {
		t = &GetNode_Node_Reaction_User{}
	}
	return t.ID
}

type GetNode_Node_Reaction struct {
	ID   string                      "json:\"id\" graphql:\"id\""
	User *GetNode_Node_Reaction_User "json:\"user,omitempty\" graphql:\"user\""
}

func (t *GetNode_Node_Reaction) GetID() string {
	if t == nil {
		t = &GetNode_Node_Reaction{}
	}
	return t.ID
}
func (t *GetNode_Node_Reaction) GetUser() *GetNode_Node_Reaction_User {
	if t == nil {
		t = &GetNode_Node_Reaction{}
	}
	return t.User
}

type GetNode_Node struct {
	Reaction   GetNode_Node_Reaction   "graphql:\"... on Reaction\""
	Repository GetNode_Node_Repository "graphql:\"... on Repository\""
	ID         string                  "json:\"id\" graphql:\"id\""
}

func (t *GetNode_Node) GetReaction() *GetNode_Node_Reaction {
	if t == nil {
		t = &GetNode_Node{}
	}
	return &t.Reaction
}
func (t *GetNode_Node) GetRepository() *GetNode_Node_Repository {
	if t == nil {
		t = &GetNode_Node{}
	}
	return &t.Repository
}
func (t *GetNode_Node) GetID() string {
	if t == nil {
		t = &GetNode_Node{}
	}
	return t.ID
}

type AddStar_AddStar_Starrable_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *AddStar_AddStar_Starrable_Repository) GetID() string {
	if t == nil {
		t = &AddStar_AddStar_Starrable_Repository{}
	}
	return t.ID
}
func (t *AddStar_AddStar_Starrable_Repository) GetName() string {
	if t == nil {
		t = &AddStar_AddStar_Starrable_Repository{}
	}
	return t.Name
}

type AddStar_AddStar_Starrable struct {
	Repository       AddStar_AddStar_Starrable_Repository "graphql:\"... on Repository\""
	ID               string                               "json:\"id\" graphql:\"id\""
	ViewerHasStarred bool                                 "json:\"viewerHasStarred\" graphql:\"viewerHasStarred\""
}

func (t *AddStar_AddStar_Starrable) GetRepository() *AddStar_AddStar_Starrable_Repository {
	if t == nil {
		t = &AddStar_AddStar_Starrable{}
	}
	return &t.Repository
}
func (t *AddStar_AddStar_Starrable) GetID() string {
	if t == nil {
		t = &AddStar_AddStar_Starrable{}
	}
	return t.ID
}
func (t *AddStar_AddStar_Starrable) GetViewerHasStarred() bool {
	if t == nil {
		t = &AddStar_AddStar_Starrable{}
	}
	return t.ViewerHasStarred
}

type AddStar_AddStar struct {
	Starrable *AddStar_AddStar_Starrable "json:\"starrable,omitempty\" graphql:\"starrable\""
}

func (t *AddStar_AddStar) GetStarrable() *AddStar_AddStar_Starrable {
	if t == nil {
		t = &AddStar_AddStar{}
	}
	return t.Starrable
}

type GetNode2_Node_Release_ReactionGroups struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
}

func (t *GetNode2_Node_Release_ReactionGroups) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNode2_Node_Release_ReactionGroups{}
	}
	return t.CreatedAt
}

type GetNode2_Node_Release struct {
	ID             string                                  "json:\"id\" graphql:\"id\""
	Name           *string                                 "json:\"name,omitempty\" graphql:\"name\""
	ReactionGroups []*GetNode2_Node_Release_ReactionGroups "json:\"reactionGroups,omitempty\" graphql:\"reactionGroups\""
}

func (t *GetNode2_Node_Release) GetID() string {
	if t == nil {
		t = &GetNode2_Node_Release{}
	}
	return t.ID
}
func (t *GetNode2_Node_Release) GetName() *string {
	if t == nil {
		t = &GetNode2_Node_Release{}
	}
	return t.Name
}
func (t *GetNode2_Node_Release) GetReactionGroups() []*GetNode2_Node_Release_ReactionGroups {
	if t == nil {
		t = &GetNode2_Node_Release{}
	}
	return t.ReactionGroups
}

type GetUser struct {
	Viewer GetUser_Viewer "json:\"viewer\" graphql:\"viewer\""
}

func (t *GetUser) GetViewer() *GetUser_Viewer {
	if t == nil {
		t = &GetUser{}
	}
	return &t.Viewer
}

type GetNode struct {
	Node *GetNode_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNode) GetNode() *GetNode_Node {
	if t == nil {
		t = &GetNode{}
	}
	return t.Node
}

type AddStar struct {
	AddStar *AddStar_AddStar "json:\"addStar,omitempty\" graphql:\"addStar\""
}

func (t *AddStar) GetAddStar() *AddStar_AddStar {
	if t == nil {
		t = &AddStar{}
	}
	return t.AddStar
}

type GetNode2 struct {
	Node *GetNode2_Node_Release "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNode2) GetNode() *GetNode2_Node_Release {
	if t == nil {
		t = &GetNode2{}
	}
	return t.Node
}

const GetUserDocument = `query GetUser ($repositoryFirst: Int!, $languageFirst: Int!) {
	viewer {
		id
		name
		repositories(first: $repositoryFirst, orderBy: {field:CREATED_AT,direction:DESC}) {
			nodes {
				id
				name
				languages(first: $languageFirst) {
					nodes {
						... LanguageFragment
					}
				}
			}
		}
	}
}
fragment LanguageFragment on Language {
	id
	name
}
`

func (c *Client) GetUser(ctx context.Context, repositoryFirst int, languageFirst int, interceptors ...client.RequestInterceptor) (*GetUser, error) {
	vars := map[string]any{
		"repositoryFirst": repositoryFirst,
		"languageFirst":   languageFirst,
	}

	var res GetUser
	if err := c.Client.Post(ctx, "GetUser", GetUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNodeDocument = `query GetNode ($id: ID!) {
	node(id: $id) {
		id
		... on Repository {
			... RepositoryFragment
			languages(first: 100) {
				nodes {
					... LanguageFragment
				}
			}
		}
		... on Reaction {
			id
			user {
				id
			}
		}
	}
}
fragment RepositoryFragment on Repository {
	id
	name
}
fragment LanguageFragment on Language {
	id
	name
}
`

func (c *Client) GetNode(ctx context.Context, id string, interceptors ...client.RequestInterceptor) (*GetNode, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetNode
	if err := c.Client.Post(ctx, "GetNode", GetNodeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddStarDocument = `mutation AddStar ($input: AddStarInput!) {
	addStar(input: $input) {
		starrable {
			id
			viewerHasStarred
			... on Repository {
				id
				name
			}
		}
	}
}
`

func (c *Client) AddStar(ctx context.Context, input model.AddStarInput, interceptors ...client.RequestInterceptor) (*AddStar, error) {
	vars := map[string]any{
		"input": input,
	}

	var res AddStar
	if err := c.Client.Post(ctx, "AddStar", AddStarDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNode2Document = `query GetNode2 ($id: ID!) {
	node(id: $id) {
		... on Release {
			id
			name
			reactionGroups {
				createdAt
			}
		}
	}
}
`

func (c *Client) GetNode2(ctx context.Context, id string, interceptors ...client.RequestInterceptor) (*GetNode2, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetNode2
	if err := c.Client.Post(ctx, "GetNode2", GetNode2Document, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetUserDocument:  "GetUser",
	GetNodeDocument:  "GetNode",
	AddStarDocument:  "AddStar",
	GetNode2Document: "GetNode2",
}
