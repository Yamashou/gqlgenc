// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package domain

type UserFragment1 struct {
	User struct {
		Name string "json:\"name,omitempty,omitzero\" graphql:\"name\""
	} "graphql:\"... on User\""
	Name    string                "json:\"name,omitempty,omitzero\" graphql:\"name\""
	Profile UserFragment1_Profile "json:\"profile,omitempty,omitzero\" graphql:\"profile\""
}

type UserFragment1_Profile struct {
	PrivateProfile struct {
		Age *int "json:\"age\" graphql:\"age\""
	} "graphql:\"... on PrivateProfile\""
	PublicProfile struct {
		Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
	} "graphql:\"... on PublicProfile\""
}

type UserFragment2 struct {
	Name string "json:\"name,omitempty,omitzero\" graphql:\"name\""
}

type UserOperation struct {
	OptionalUser *UserOperation_OptionalUser "json:\"optionalUser\" graphql:\"optionalUser\""
	User         UserOperation_User          "json:\"user,omitempty,omitzero\" graphql:\"user\""
}

func (t *UserOperation) GetOptionalUser() *UserOperation_OptionalUser {
	if t == nil {
		t = &UserOperation{}
	}
	return t.OptionalUser
}
func (t *UserOperation) GetUser() UserOperation_User {
	if t == nil {
		t = &UserOperation{}
	}
	return t.User
}

type UserOperation_OptionalUser struct {
	Name string "json:\"name,omitempty,omitzero\" graphql:\"name\""
}

func (t *UserOperation_OptionalUser) GetName() string {
	if t == nil {
		t = &UserOperation_OptionalUser{}
	}
	return t.Name
}

type UserOperation_User struct {
	User struct {
		UserFragment2
		Name string "json:\"name,omitempty,omitzero\" graphql:\"name\""
	} "graphql:\"... on User\""
	UserFragment1
	UserFragment2
	Address         UserOperation_User_Address          "json:\"address,omitempty,omitzero\" graphql:\"address\""
	Name            string                              "json:\"name,omitempty,omitzero\" graphql:\"name\""
	Name2           string                              "json:\"name2,omitempty,omitzero\" graphql:\"name2\""
	OptionalAddress *UserOperation_User_OptionalAddress "json:\"optionalAddress\" graphql:\"optionalAddress\""
	OptionalProfile *UserOperation_User_OptionalProfile "json:\"optionalProfile\" graphql:\"optionalProfile\""
	Profile         UserOperation_User_Profile          "json:\"profile,omitempty,omitzero\" graphql:\"profile\""
	Profile2        UserOperation_User_Profile2         "json:\"profile2,omitempty,omitzero\" graphql:\"profile2\""
}

type UserOperation_User_Address struct {
	PrivateAddress struct {
		Private bool   "json:\"private,omitempty,omitzero\" graphql:\"private\""
		Street  string "json:\"street,omitempty,omitzero\" graphql:\"street\""
	} "graphql:\"... on PrivateAddress\""
	PublicAddress struct {
		Public bool   "json:\"public,omitempty,omitzero\" graphql:\"public\""
		Street string "json:\"street,omitempty,omitzero\" graphql:\"street\""
	} "graphql:\"... on PublicAddress\""
	Street string "json:\"street,omitempty,omitzero\" graphql:\"street\""
}

type UserOperation_User_OptionalAddress struct {
	PrivateAddress struct {
		Private bool   "json:\"private,omitempty,omitzero\" graphql:\"private\""
		Street  string "json:\"street,omitempty,omitzero\" graphql:\"street\""
	} "graphql:\"... on PrivateAddress\""
	PublicAddress struct {
		Public bool   "json:\"public,omitempty,omitzero\" graphql:\"public\""
		Street string "json:\"street,omitempty,omitzero\" graphql:\"street\""
	} "graphql:\"... on PublicAddress\""
	Street string "json:\"street,omitempty,omitzero\" graphql:\"street\""
}

func (t *UserOperation_User_OptionalAddress) GetPrivateAddress() struct {
	Private bool   "json:\"private,omitempty,omitzero\" graphql:\"private\""
	Street  string "json:\"street,omitempty,omitzero\" graphql:\"street\""
} {
	if t == nil {
		t = &UserOperation_User_OptionalAddress{}
	}
	return t.PrivateAddress
}
func (t *UserOperation_User_OptionalAddress) GetPublicAddress() struct {
	Public bool   "json:\"public,omitempty,omitzero\" graphql:\"public\""
	Street string "json:\"street,omitempty,omitzero\" graphql:\"street\""
} {
	if t == nil {
		t = &UserOperation_User_OptionalAddress{}
	}
	return t.PublicAddress
}
func (t *UserOperation_User_OptionalAddress) GetStreet() string {
	if t == nil {
		t = &UserOperation_User_OptionalAddress{}
	}
	return t.Street
}

type UserOperation_User_OptionalProfile struct {
	PrivateProfile struct {
		Age *int "json:\"age\" graphql:\"age\""
	} "graphql:\"... on PrivateProfile\""
	PublicProfile struct {
		Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
	} "graphql:\"... on PublicProfile\""
}

func (t *UserOperation_User_OptionalProfile) GetPrivateProfile() struct {
	Age *int "json:\"age\" graphql:\"age\""
} {
	if t == nil {
		t = &UserOperation_User_OptionalProfile{}
	}
	return t.PrivateProfile
}
func (t *UserOperation_User_OptionalProfile) GetPublicProfile() struct {
	Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
} {
	if t == nil {
		t = &UserOperation_User_OptionalProfile{}
	}
	return t.PublicProfile
}

type UserOperation_User_Profile struct {
	PrivateProfile struct {
		Age *int "json:\"age\" graphql:\"age\""
	} "graphql:\"... on PrivateProfile\""
	PublicProfile struct {
		Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
	} "graphql:\"... on PublicProfile\""
}

type UserOperation_User_Profile2 struct {
	PrivateProfile struct {
		Age *int "json:\"age\" graphql:\"age\""
	} "graphql:\"... on PrivateProfile\""
	PublicProfile struct {
		Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
	} "graphql:\"... on PublicProfile\""
}

const UserOperationDocument = `query UserOperation {
	user {
		name
		name2: name
		profile {
			... on PublicProfile {
				status
			}
			... on PrivateProfile {
				age
			}
		}
		profile2: profile {
			... on PublicProfile {
				status
			}
			... on PrivateProfile {
				age
			}
		}
		optionalProfile {
			... on PublicProfile {
				status
			}
			... on PrivateProfile {
				age
			}
		}
		address {
			street
			... on PublicAddress {
				street
				public
			}
			... on PrivateAddress {
				street
				private
			}
		}
		optionalAddress {
			street
			... on PublicAddress {
				street
				public
			}
			... on PrivateAddress {
				street
				private
			}
		}
		... UserFragment1
		... UserFragment2
		... on User {
			name
			... UserFragment2
		}
	}
	optionalUser {
		name
	}
}
fragment UserFragment1 on User {
	name
	name
	... on User {
		name
	}
	profile {
		... on PublicProfile {
			status
		}
		... on PrivateProfile {
			age
		}
	}
}
fragment UserFragment2 on User {
	name
}
`

var DocumentOperationNames = map[string]string{
	UserOperationDocument: "UserOperation",
}
