directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

schema {
  query: Query
}

type Query {
  user: User! @goField(forceResolver: true)
  optionalUser: User @goField(forceResolver: true)
}

type User {
  id: ID!
  name: String!
  profile: Profile! @goField(forceResolver: true)
  optionalProfile: Profile @goField(forceResolver: true)
  address: Address! @goField(forceResolver: true)
  optionalAddress: Address @goField(forceResolver: true)
}

union Profile = PublicProfile | PrivateProfile

type PublicProfile {
  id: ID!
  status: Status!
}

type PrivateProfile {
  id: ID!
  age: Int
}

enum Status {
  ACTIVE
  INACTIVE
}

interface Address {
  street: String!
}

type PublicAddress implements Address {
  id: ID!
  street: String!
  public: Boolean!
}

type PrivateAddress implements Address {
  id: ID!
  street: String!
  private: Boolean!
}
