// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package domain

// Fragment
type UserFragment1 struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UserFragment1) GetName() string {
	if t == nil {
		t = &UserFragment1{}
	}
	return t.Name
}

type UserFragment2 struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UserFragment2) GetName() string {
	if t == nil {
		t = &UserFragment2{}
	}
	return t.Name
}

// Structs
type UserQuery_User_User struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UserQuery_User_User) GetName() string {
	if t == nil {
		t = &UserQuery_User_User{}
	}
	return t.Name
}

type UserQuery_User struct {
	User UserQuery_User_User "graphql:\"... on User\""
	Name string              "json:\"name\" graphql:\"name\""
}

func (t *UserQuery_User) GetUser() *UserQuery_User_User {
	if t == nil {
		t = &UserQuery_User{}
	}
	return &t.User
}
func (t *UserQuery_User) GetName() string {
	if t == nil {
		t = &UserQuery_User{}
	}
	return t.Name
}

// OperationResponse
type UserQuery struct {
	User UserQuery_User "json:\"user\" graphql:\"user\""
}

func (t *UserQuery) GetUser() *UserQuery_User {
	if t == nil {
		t = &UserQuery{}
	}
	return &t.User
}

// Operation
const UserQueryDocument = `query UserQuery {
	user {
		name
		... UserFragment1
		... UserFragment2
		... on User {
			name
			... UserFragment1
			... UserFragment2
		}
	}
}
fragment UserFragment1 on User {
	name
	name
}
fragment UserFragment2 on User {
	name
}
`

var DocumentOperationNames = map[string]string{
	UserQueryDocument: "UserQuery",
}
