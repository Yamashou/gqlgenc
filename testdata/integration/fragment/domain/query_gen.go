// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package domain

type UserFragment1 struct {
	User struct {
		Name string "json:\"name,omitempty,omitzero\" graphql:\"name\""
	} "graphql:\"... on User\""
	Name    string                "json:\"name,omitempty,omitzero\" graphql:\"name\""
	Profile userFragment1_Profile "json:\"profile,omitempty,omitzero\" graphql:\"profile\""
}

type UserFragment2 struct {
	Name string "json:\"name,omitempty,omitzero\" graphql:\"name\""
}

type UserOperation struct {
	OptionalUser *userOperation_OptionalUser "json:\"optionalUser\" graphql:\"optionalUser\""
	User         userOperation_User          "json:\"user,omitempty,omitzero\" graphql:\"user\""
}

func (t *UserOperation) GetOptionalUser() *userOperation_OptionalUser {
	if t == nil {
		t = &UserOperation{}
	}
	return t.OptionalUser
}
func (t *UserOperation) GetUser() userOperation_User {
	if t == nil {
		t = &UserOperation{}
	}
	return t.User
}

type userFragment1_Profile struct {
	PrivateProfile struct {
		Age *int "json:\"age\" graphql:\"age\""
	} "graphql:\"... on PrivateProfile\""
	PublicProfile struct {
		Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
	} "graphql:\"... on PublicProfile\""
}

type userOperation_OptionalUser struct {
	Name string "json:\"name,omitempty,omitzero\" graphql:\"name\""
}

func (t *userOperation_OptionalUser) GetName() string {
	if t == nil {
		t = &userOperation_OptionalUser{}
	}
	return t.Name
}

type userOperation_User struct {
	User struct {
		UserFragment2
		Name string "json:\"name,omitempty,omitzero\" graphql:\"name\""
	} "graphql:\"... on User\""
	UserFragment1
	UserFragment2
	Name            string                              "json:\"name,omitempty,omitzero\" graphql:\"name\""
	OptionalProfile *userOperation_User_OptionalProfile "json:\"optionalProfile\" graphql:\"optionalProfile\""
	Profile         userOperation_User_Profile          "json:\"profile,omitempty,omitzero\" graphql:\"profile\""
}

type userOperation_User_OptionalProfile struct {
	PrivateProfile struct {
		Age *int "json:\"age\" graphql:\"age\""
	} "graphql:\"... on PrivateProfile\""
	PublicProfile struct {
		Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
	} "graphql:\"... on PublicProfile\""
}

func (t *userOperation_User_OptionalProfile) GetPrivateProfile() struct {
	Age *int "json:\"age\" graphql:\"age\""
} {
	if t == nil {
		t = &userOperation_User_OptionalProfile{}
	}
	return t.PrivateProfile
}
func (t *userOperation_User_OptionalProfile) GetPublicProfile() struct {
	Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
} {
	if t == nil {
		t = &userOperation_User_OptionalProfile{}
	}
	return t.PublicProfile
}

type userOperation_User_Profile struct {
	PrivateProfile struct {
		Age *int "json:\"age\" graphql:\"age\""
	} "graphql:\"... on PrivateProfile\""
	PublicProfile struct {
		Status Status "json:\"status,omitempty,omitzero\" graphql:\"status\""
	} "graphql:\"... on PublicProfile\""
}

const UserOperationDocument = `query UserOperation {
	user {
		name
		profile {
			... on PublicProfile {
				status
			}
			... on PrivateProfile {
				age
			}
		}
		optionalProfile {
			... on PublicProfile {
				status
			}
			... on PrivateProfile {
				age
			}
		}
		... UserFragment1
		... UserFragment2
		... on User {
			name
			... UserFragment2
		}
	}
	optionalUser {
		name
	}
}
fragment UserFragment1 on User {
	name
	name
	... on User {
		name
	}
	profile {
		... on PublicProfile {
			status
		}
		... on PrivateProfile {
			age
		}
	}
}
fragment UserFragment2 on User {
	name
}
`

var DocumentOperationNames = map[string]string{
	UserOperationDocument: "UserOperation",
}
