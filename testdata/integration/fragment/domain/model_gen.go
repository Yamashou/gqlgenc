// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package domain

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Address interface {
	IsAddress()
	GetStreet() string
}

type Profile interface {
	IsProfile()
}

type PrivateAddress struct {
	ID      string `json:"id"`
	Street  string `json:"street"`
	Private bool   `json:"private"`
}

func (PrivateAddress) IsAddress()             {}
func (this PrivateAddress) GetStreet() string { return this.Street }

type PrivateProfile struct {
	ID  string `json:"id"`
	Age *int   `json:"age,omitempty,omitzero"`
}

func (PrivateProfile) IsProfile() {}

type PublicAddress struct {
	ID     string `json:"id"`
	Street string `json:"street"`
	Public bool   `json:"public"`
}

func (PublicAddress) IsAddress()             {}
func (this PublicAddress) GetStreet() string { return this.Street }

type PublicProfile struct {
	ID     string `json:"id"`
	Status Status `json:"status"`
}

func (PublicProfile) IsProfile() {}

type Query struct {
}

type User struct {
	ID              string  `json:"id"`
	Name            string  `json:"name"`
	Profile         Profile `json:"profile"`
	OptionalProfile Profile `json:"optionalProfile,omitempty,omitzero"`
	Address         Address `json:"address"`
	OptionalAddress Address `json:"optionalAddress,omitempty,omitzero"`
}

type Status string

const (
	StatusActive   Status = "ACTIVE"
	StatusInactive Status = "INACTIVE"
)

var AllStatus = []Status{
	StatusActive,
	StatusInactive,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusActive, StatusInactive:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Status) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Status) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
