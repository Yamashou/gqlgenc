package schema

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/Yamashou/gqlgenc/v3/testdata/integration/basic/domain"
)

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input *domain.UpdateUserInput) (*domain.UpdateUserPayload, error) {
	var name string
	n, ok := input.Name.ValueOK()
	if ok {
		if n == nil {
			name = "nil"
		} else {
			name = *n
		}
	} else {
		name = "undefined"
	}
	return &domain.UpdateUserPayload{
		User: &domain.User{
			ID:   input.ID,
			Name: name,
		},
	}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*domain.User, error) {
	return &domain.User{
		ID:   "1",
		Name: "John Doe",
	}, nil
}

// OptionalUser is the resolver for the optionalUser field.
func (r *queryResolver) OptionalUser(ctx context.Context) (*domain.User, error) {
	return &domain.User{
		ID:   "2",
		Name: "Sam Smith",
	}, nil
}

// Profile is the resolver for the profile field.
func (r *userResolver) Profile(ctx context.Context, obj *domain.User) (domain.Profile, error) {
	age := 30
	return &domain.PrivateProfile{
		Age: &age,
	}, nil
}

// OptionalProfile is the resolver for the optionalProfile field.
func (r *userResolver) OptionalProfile(ctx context.Context, obj *domain.User) (domain.Profile, error) {
	return &domain.PublicProfile{
		Status: domain.StatusActive,
	}, nil
}

// Address is the resolver for the address field.
func (r *userResolver) Address(ctx context.Context, obj *domain.User) (domain.Address, error) {
	return &domain.PrivateAddress{
		Street: "123 Main St",
	}, nil
}

// OptionalAddress is the resolver for the optionalAddress field.
func (r *userResolver) OptionalAddress(ctx context.Context, obj *domain.User) (domain.Address, error) {
	return &domain.PublicAddress{
		Street: "456 Elm St",
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
